/databases/db_interface.go

```go
package databases

import "docker-db-management/types"

type DBHandler interface {
	SetConfig(config types.Config) error
	Create() error
	Remove(name string) error
}
```

/databases/maria_db.go

```go
package databases

import (
	"docker-db-management/types"
	"fmt"
)

type MariaDB struct {
	LatestImage  string
	Password     string
	DatabaseName string
}

var _ DBHandler = &MariaDB{}

func (m *MariaDB) SetConfig(config types.Config) error {
	return nil
}

func (m MariaDB) Create() error {
	fmt.Printf("Creating MariaDB database: %s\n", m.DatabaseName)
	return nil
}

func (m MariaDB) Remove(name string) error {
	fmt.Printf("Removing MariaDB database: %s\n", name)
	return nil
}
```

/databases/my_sql.go

```go
package databases

import (
	"docker-db-management/types"
	"fmt"
)

type MySQL struct {
	LatestImage  bool
	Password     string
	DatabaseName string
}

var _ DBHandler = &MySQL{}

func (m *MySQL) SetConfig(config types.Config) error {
	m.LatestImage = config.LatestImage
	m.Password = config.Password
	m.DatabaseName = config.DatabaseName
	return nil
}

func (m MySQL) Create() error {
	fmt.Printf("Creating MySQL database: %s\n", m.DatabaseName)
	return nil
}

func (m MySQL) Remove(name string) error {
	fmt.Printf("Removing MySQL database: %s\n", name)
	return nil
}
```

/formFlow/create.go

```go
package formflow

import (
	"docker-db-management/databases"
	"docker-db-management/types"
	"fmt"
	"log"

	"github.com/charmbracelet/huh"
	"github.com/fatih/color"
)

var (
	latestVersionEntity = types.LatestVersion{
		Form: types.FormValues[bool]{
			Title:       "Pull the latest image?",
			Description: "If you don't have an image, it will still be pulled.",
			Choice:      false,
		},
	}

	passwordEntity = types.StringEntity{
		Form: types.FormValues[string]{
			Title:       "Set a root password for the database?",
			Description: "If you don't set a password, it will be set to 12345678.",
			Choice:      "",
		},
	}

	databaseNameEntity = types.StringEntity{
		Form: types.FormValues[string]{
			Title:       "Create a database?",
			Description: "You can leave this blank if you don't want to create a database.",
			Choice:      "",
		},
	}

	// databasePortEntity = types.IntEntity{
	// 	Form: types.FormValues[int]{
	// 		Title:       "Set a database port?",
	// 		Description: "If you don't set a database port, it will be set to 3306.",
	// 		Choice:      3306,
	// 	},
	// }

)

func Create(dbHandler databases.DBHandler) {
	green := color.New(color.FgGreen).SprintFunc()
	red := color.New(color.FgRed).SprintFunc()
	blue := color.New(color.FgBlue).SprintFunc()

	form := huh.NewForm(
		huh.NewGroup(
			huh.NewConfirm().
				Title(latestVersionEntity.Form.Title).
				Description(latestVersionEntity.Form.Description).
				Affirmative("Yes").
				Negative("No.").
				Value(&latestVersionEntity.Form.Choice),
		),
	)

	err := form.Run()
	if err != nil {
		log.Fatal(err)
	}

	symbol := red("✗ ")
	if latestVersionEntity.Form.Choice {
		symbol = green("✓ ")
	}
	fmt.Println(symbol, latestVersionEntity.Form.Title)

	form = huh.NewForm(
		huh.NewGroup(
			huh.NewInput().
				Title(passwordEntity.Form.Title).
				Description(passwordEntity.Form.Description).
				Value(&passwordEntity.Form.Choice),
		),
	)

	err = form.Run()
	if err != nil {
		log.Fatal(err)
	}

	if passwordEntity.Form.Choice == "" {
		passwordEntity.Form.Choice = "12345678"
	}
	fmt.Println(green("✓ "), passwordEntity.Form.Title, blue(passwordEntity.Form.Choice))

	form = huh.NewForm(
		huh.NewGroup(
			huh.NewInput().
				Title(databaseNameEntity.Form.Title).
				Description(databaseNameEntity.Form.Description).
				Value(&databaseNameEntity.Form.Choice),
		),
	)

	err = form.Run()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(green("✓ "), databaseNameEntity.Form.Title, blue(databaseNameEntity.Form.Choice))

	dbHandler.SetConfig(types.Config{
		LatestImage:  latestVersionEntity.Form.Choice,
		Password:     passwordEntity.Form.Choice,
		DatabaseName: databaseNameEntity.Form.Choice,
	})
	dbHandler.Create()
}

// latest version yes/no
// root password (if blank than defaul 12345678)
// database name (if blank no database will be created)

// later
// database user (if blank than defaul root)
// database password (if blank than defaul 12345678)
// database port (if blank than defaul 3306)
// database host (if blank than defaul localhost)

// create database
// create user
// create password
// create database
```

/formFlow/list.go

```go
package formflow

func list() {

}
```

/formFlow/remove.go

```go
package formflow

import "docker-db-management/databases"

func Remove(databases.DBHandler) {

}
```

/main.go

```go
package main

import (
	"fmt"
	"log"

	"docker-db-management/databases"
	formflow "docker-db-management/formFlow"
	"docker-db-management/types"

	"github.com/charmbracelet/huh"
	"github.com/fatih/color"
)

var (
	actionsEntity = types.ActionSelection{
		Actions: []types.NameValue{
			{Key: "Create database", Value: "create"},
			{Key: "Remove database", Value: "remove"},
		},
		Form: types.FormValues[string]{
			Title:  "What would you like to do?",
			Choice: "",
		},
	}

	databasesEntity = types.DatabaseSelection{
		Databases: []types.NameValue{
			{Key: "MySQL", Value: "mysql"},
			{Key: "MariaDB", Value: "mariadb"},
		},
		Form: types.FormValues[string]{
			Title:  "Which database do you choose?",
			Choice: "",
		},
	}
)

func main() {
	fmt.Println("")
	green := color.New(color.FgGreen).SprintFunc()
	blue := color.New(color.FgBlue).SprintFunc()

	var actionOptions []huh.Option[string]
	for _, a := range actionsEntity.Actions {
		actionOptions = append(actionOptions, huh.NewOption(a.Key, a.Value))
	}

	var dbOptions []huh.Option[string]
	for _, db := range databasesEntity.Databases {
		dbOptions = append(dbOptions, huh.NewOption(db.Key, db.Value))
	}

	form := huh.NewForm(
		huh.NewGroup(
			huh.NewSelect[string]().
				Title(actionsEntity.Form.Title).
				Options(actionOptions...).
				Value(&actionsEntity.Form.Choice),
		),
	)

	err := form.Run()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(green("✓ "), actionsEntity.Form.Title, blue(actionsEntity.Form.Choice))

	form = huh.NewForm(
		huh.NewGroup(
			huh.NewSelect[string]().
				Title("Which database do you choose?").
				Options(dbOptions...).
				Value(&databasesEntity.Form.Choice),
		),
	)

	err = form.Run()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println(green("✓ "), databasesEntity.Form.Title, blue(databasesEntity.Form.Choice))

	var dbHandler databases.DBHandler
	switch databasesEntity.Form.Choice {
	case "mysql":
		dbHandler = &databases.MySQL{}
	case "mariadb":
		dbHandler = &databases.MariaDB{}
	default:
		log.Fatal("Unsupported database type")
	}

	switch actionsEntity.Form.Choice {
	case "create":
		formflow.Create(dbHandler)
	case "remove":
		formflow.Remove(dbHandler)
	default:
		log.Fatal("Unsupported action")
	}

	if err != nil {
		log.Fatal(err)
	}

	// fmt.Printf("Successfully executed %s on %s database named %s\n", action, database, dbName)
}
```

/types/types.go

```go
package types

type NameValue struct {
	Key   string
	Value string
}

type ActionSelection struct {
	Actions []NameValue
	Form    FormValues[string] // or StringForm
}

type DatabaseSelection struct {
	Databases []NameValue
	Form      FormValues[string]
}

type StringEntity struct {
	Entity []NameValue
	Form   FormValues[string]
}

type LatestVersion struct {
	Labels []NameValue
	Form   FormValues[bool]
}

type FormValues[T any] struct {
	Title       string
	Description string
	Choice      T
}

type StringForm = FormValues[string]
type BoolForm = FormValues[bool]
type IntForm = FormValues[int]
type StringsForm = FormValues[[]string]

type Config struct {
	LatestImage  bool
	Password     string
	DatabaseName string
}
```

